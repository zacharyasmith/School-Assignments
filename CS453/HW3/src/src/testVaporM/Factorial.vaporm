const ft_Fac
  :Fac.ComputeFac

func Fac.ComputeFac [in 0, out 0, local 6]
  $t0 = $a0
  $t1 = $a1
  $t2 = LtS($t1 1)
  if0 $t2 goto :if0_else
  $s0 = 1
  goto :if0_end
if0_else:
  $s1 = [$t0]
  $s1 = [$s1]
  $s2 = Sub($t1 1)
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $s2
  $a0 = $t0
  $a1 = $s2
  call $s1
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $s2 = local[5]
  $t0 = $v0
  $t0 = MulS($t1 $t0)
  $s0 = $t0
if0_end:
  $v0 = $s0
  ret

func AllocArray [in 0, out 0, local 0]
  $t0 = $a0
  $t1 = MulS($t0 4)
  $t1 = Add($t1 4)
  $s0 = HeapAllocZ($t1)
  [$s0] = $t0
  $v0 = $s0
  ret

func ArrayIndexHelper [in 0, out 0, local 0]
  $t0 = $a0
  $s0 = Add($t0 1)
  $t0 = MulS($s0 4)
  $v0 = $t0
  ret

func Main [in 0, out 0, local 3]
  $t0 = HeapAllocZ(4)
  [$t0] = :ft_Fac
  $t1 = [$t0]
  $s0 = [$t1]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  $a0 = $t0
  $a1 = 10
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t0 = $v0
  PrintIntS($t0)
  ret


