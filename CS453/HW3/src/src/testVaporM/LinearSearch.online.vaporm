const vmt_LS
  :LS.Start
  :LS.Print
  :LS.Search
  :LS.Init

func Main [in 0, out 0, local 3]
  $t0 = HeapAllocZ(12)
  [$t0] = :vmt_LS
  if $t0 goto :null1
  Error("null pointer")
null1:
  $t1 = [$t0]
  $t1 = [$t1]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  $a0 = $t0
  $a1 = 10
  call $t1
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $s0 = $v0
  PrintIntS($s0)
  ret

func LS.Start [in 0, out 0, local 4]
  $t1 = $a0
  $t0 = $a1
  $t2 = [$t1]
  $t2 = [$t2 + 12]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  $a0 = $t1
  $a1 = $t0
  call $t2
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s0 = $v0
  $t0 = [$t1]
  $t0 = [$t0 + 4]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  $a0 = $t1
  call $t0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s0 = $v0
  PrintIntS(9999)
  $t0 = [$t1]
  $t0 = [$t0 + 8]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  $a0 = $t1
  $a1 = 8
  call $t0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s0 = $v0
  PrintIntS($s0)
  $t0 = [$t1]
  $t0 = [$t0 + 8]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  $a0 = $t1
  $a1 = 12
  call $t0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s0 = $v0
  PrintIntS($s0)
  $t0 = [$t1]
  $t0 = [$t0 + 8]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  $a0 = $t1
  $a1 = 17
  call $t0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s0 = $v0
  PrintIntS($s0)
  $t0 = [$t1]
  $t0 = [$t0 + 8]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  $a0 = $t1
  $a1 = 50
  call $t0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s0 = $v0
  PrintIntS($s0)
  $v0 = 55
  ret

func LS.Print [in 0, out 0, local 0]
  $t0 = $a0
  $t1 = 1
while1_top:
  $t2 = [$t0 + 8]
  $s0 = LtS($t1 $t2)
  if0 $s0 goto :while1_end
  $s0 = [$t0 + 4]
  if $s0 goto :null2
  Error("null pointer")
null2:
  $s1 = [$s0]
  $s1 = Lt($t1 $s1)
  if $s1 goto :bounds1
  Error("array index out of bounds")
bounds1:
  $s1 = MulS($t1 4)
  $s1 = Add($s1 $s0)
  $s0 = [$s1 + 4]
  PrintIntS($s0)
  $t1 = Add($t1 1)
  goto :while1_top
while1_end:
  $v0 = 0
  ret

func LS.Search [in 0, out 0, local 0]
  $t1 = $a0
  $t0 = $a1
  $t2 = 1
  $t3 = 0
  $s0 = 0
while2_top:
  $s1 = [$t1 + 8]
  $s1 = LtS($t2 $s1)
  if0 $s1 goto :while2_end
  $s1 = [$t1 + 4]
  if $s1 goto :null3
  Error("null pointer")
null3:
  $s2 = [$s1]
  $s2 = Lt($t2 $s2)
  if $s2 goto :bounds2
  Error("array index out of bounds")
bounds2:
  $s2 = MulS($t2 4)
  $s2 = Add($s2 $s1)
  $s1 = [$s2 + 4]
  $s2 = Add($t0 1)
  $s3 = LtS($s1 $t0)
  if0 $s3 goto :if1_else
  $t3 = 0
  goto :if1_end
if1_else:
  $s1 = LtS($s1 $s2)
  $s1 = Sub(1 $s1)
  if0 $s1 goto :if2_else
  $s1 = 0
  goto :if2_end
if2_else:
  $s1 = 1
  $s0 = 1
  $t2 = [$t1 + 8]
if1_end:
if2_end:
  $t2 = Add($t2 1)
  goto :while2_top
while2_end:
  $v0 = $s0
  ret

func LS.Init [in 0, out 0, local 8]
  $t3 = $a0
  $t2 = $a1
  [$t3 + 8] = $t2
  local[0] = $t4
  local[1] = $t0
  local[2] = $t1
  local[3] = $s0
  local[4] = $t2
  local[5] = $s1
  local[6] = $t3
  local[7] = $s2
  $a0 = $t2
  call :AllocArray
  $t4 = local[0]
  $t0 = local[1]
  $t1 = local[2]
  $s0 = local[3]
  $t2 = local[4]
  $s1 = local[5]
  $t3 = local[6]
  $s2 = local[7]
  $s0 = $v0
  [$t3 + 4] = $s0
  $t4 = 1
  $s0 = [$t3 + 8]
  $s0 = Add($s0 1)
while3_top:
  $s1 = [$t3 + 8]
  $s1 = LtS($t4 $s1)
  if0 $s1 goto :while3_end
  $t1 = MulS(2 $t4)
  $t0 = Sub($s0 3)
  $s1 = [$t3 + 4]
  if $s1 goto :null4
  Error("null pointer")
null4:
  $s2 = [$s1]
  $s2 = Lt($t4 $s2)
  if $s2 goto :bounds3
  Error("array index out of bounds")
bounds3:
  $t2 = MulS($t4 4)
  $t2 = Add($t2 $s1)
  $s1 = Add($t1 $t0)
  [$t2 + 4] = $s1
  $t4 = Add($t4 1)
  $s0 = Sub($s0 1)
  goto :while3_top
while3_end:
  $v0 = 0
  ret

func AllocArray [in 0, out 0, local 0]
  $t0 = $a0
  $t1 = MulS($t0 4)
  $t1 = Add($t1 4)
  $s0 = HeapAllocZ($t1)
  [$s0] = $t0
  $v0 = $s0
  ret


