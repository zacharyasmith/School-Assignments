const ft_BT
  :BT.Start

const ft_Tree
  :Tree.Remove
  :Tree.SetKey
  :Tree.Init
  :Tree.RecPrint
  :Tree.GetKey
  :Tree.GetHas_Right
  :Tree.SetHas_Right
  :Tree.GetRight
  :Tree.Delete
  :Tree.SetRight
  :Tree.GetHas_Left
  :Tree.GetLeft
  :Tree.SetLeft
  :Tree.Insert
  :Tree.Compare
  :Tree.RemoveLeft
  :Tree.SetHas_Left
  :Tree.RemoveRight
  :Tree.Search
  :Tree.Print

func BT.Start [in 0, out 0, local 2]
  $t0 = HeapAllocZ(28)
  [$t0] = :ft_Tree
  $s0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 8]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 16
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 76]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  PrintIntS(100000000)
  $t0 = [$s0]
  $t0 = [$t0 + 52]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 8
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 76]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 52]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 24
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 52]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 4
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 52]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 12
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 52]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 20
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 52]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 28
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 52]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 14
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 76]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 72]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 24
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  PrintIntS($t0)
  $t0 = [$s0]
  $t0 = [$t0 + 72]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 12
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  PrintIntS($t0)
  $t0 = [$s0]
  $t0 = [$t0 + 72]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 16
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  PrintIntS($t0)
  $t0 = [$s0]
  $t0 = [$t0 + 72]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 50
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  PrintIntS($t0)
  $t0 = [$s0]
  $t0 = [$t0 + 72]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 12
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  PrintIntS($t0)
  $t0 = [$s0]
  $t0 = [$t0 + 32]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 12
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 76]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $t0 = $v0
  $t0 = $t0
  $t0 = [$s0]
  $t0 = [$t0 + 72]
  local[0] = $t0
  local[1] = $s0
  $a0 = $s0
  $a1 = 12
  call $t0
  $t0 = local[0]
  $s0 = local[1]
  $s0 = $v0
  PrintIntS($s0)
  $v0 = 0
  ret

func Tree.Init [in 0, out 0, local 0]
  $t0 = $a0
  $t1 = $a1
  [$t0 + 12] = $t1
  [$t0 + 16] = 0
  [$t0 + 20] = 0
  $v0 = 1
  ret

func Tree.SetRight [in 0, out 0, local 0]
  $t1 = $a0
  $t0 = $a1
  [$t1 + 8] = $t0
  $v0 = 1
  ret

func Tree.SetLeft [in 0, out 0, local 0]
  $t1 = $a0
  $t0 = $a1
  [$t1 + 4] = $t0
  $v0 = 1
  ret

func Tree.GetRight [in 0, out 0, local 0]
  $t0 = $a0
  $s0 = [$t0 + 8]
  $v0 = $s0
  ret

func Tree.GetLeft [in 0, out 0, local 0]
  $t0 = $a0
  $s0 = [$t0 + 4]
  $v0 = $s0
  ret

func Tree.GetKey [in 0, out 0, local 0]
  $t0 = $a0
  $s0 = [$t0 + 12]
  $v0 = $s0
  ret

func Tree.SetKey [in 0, out 0, local 0]
  $t1 = $a0
  $t0 = $a1
  [$t1 + 12] = $t0
  $v0 = 1
  ret

func Tree.GetHas_Right [in 0, out 0, local 0]
  $t0 = $a0
  $s0 = [$t0 + 20]
  $v0 = $s0
  ret

func Tree.GetHas_Left [in 0, out 0, local 0]
  $t0 = $a0
  $s0 = [$t0 + 16]
  $v0 = $s0
  ret

func Tree.SetHas_Left [in 0, out 0, local 0]
  $t1 = $a0
  $t0 = $a1
  [$t1 + 16] = $t0
  $v0 = 1
  ret

func Tree.SetHas_Right [in 0, out 0, local 0]
  $t1 = $a0
  $t0 = $a1
  [$t1 + 20] = $t0
  $v0 = 1
  ret

func Tree.Compare [in 0, out 0, local 0]
  $t0 = $a1
  $t2 = $a2
  $t3 = 0
  $s0 = Add($t2 1)
  $t1 = $s0
  $s0 = LtS($t0 $t2)
  if0 $s0 goto :if0_else
  $s0 = 0
  goto :if0_end
if0_else:
  $s1 = LtS($t0 $t1)
  $s1 = LtS($t0 $t1)
  $t0 = Eq($s1 0)
  if0 $t0 goto :if1_else
  $t0 = 1
  goto :if1_end
if1_else:
  $t0 = 0
if1_end:
  if0 $t0 goto :if2_else
  $s0 = 0
  goto :if2_end
if2_else:
  $s0 = 1
if0_end:
if2_end:
  $v0 = $s0
  ret

func Tree.Insert [in 0, out 0, local 7]
  $t2 = $a0
  $t1 = $a1
  $t5 = HeapAllocZ(28)
  [$t5] = :ft_Tree
  $t0 = $t5
  $s0 = [$t0]
  $s0 = [$s0 + 8]
  local[0] = $t4
  local[1] = $t5
  local[2] = $t0
  local[3] = $t1
  local[4] = $s0
  local[5] = $t2
  local[6] = $t3
  $a0 = $t0
  $a1 = $t1
  call $s0
  $t4 = local[0]
  $t5 = local[1]
  $t0 = local[2]
  $t1 = local[3]
  $s0 = local[4]
  $t2 = local[5]
  $t3 = local[6]
  $s0 = $v0
  $s0 = $s0
  $t3 = $t2
  $t4 = 1
while0_test:
  if0 $t4 goto :while0_end
  $s0 = [$t3]
  $s0 = [$s0 + 16]
  local[0] = $t4
  local[1] = $t5
  local[2] = $t0
  local[3] = $t1
  local[4] = $s0
  local[5] = $t2
  local[6] = $t3
  $a0 = $t3
  call $s0
  $t4 = local[0]
  $t5 = local[1]
  $t0 = local[2]
  $t1 = local[3]
  $s0 = local[4]
  $t2 = local[5]
  $t3 = local[6]
  $s0 = $v0
  $s0 = $s0
  $s0 = LtS($t1 $s0)
  if0 $s0 goto :if3_else
  $s0 = [$t3]
  $s0 = [$s0 + 40]
  local[0] = $t4
  local[1] = $t5
  local[2] = $t0
  local[3] = $t1
  local[4] = $s0
  local[5] = $t2
  local[6] = $t3
  $a0 = $t3
  call $s0
  $t4 = local[0]
  $t5 = local[1]
  $t0 = local[2]
  $t1 = local[3]
  $s0 = local[4]
  $t2 = local[5]
  $t3 = local[6]
  $s0 = $v0
  if0 $s0 goto :if4_else
  $s0 = [$t3]
  $s0 = [$s0 + 44]
  local[0] = $t4
  local[1] = $t5
  local[2] = $t0
  local[3] = $t1
  local[4] = $s0
  local[5] = $t2
  local[6] = $t3
  $a0 = $t3
  call $s0
  $t4 = local[0]
  $t5 = local[1]
  $t0 = local[2]
  $t1 = local[3]
  $s0 = local[4]
  $t2 = local[5]
  $t3 = local[6]
  $s0 = $v0
  $t3 = $s0
  goto :if4_end
if4_else:
  $t4 = 0
  $s0 = [$t3]
  $s0 = [$s0 + 64]
  local[0] = $t4
  local[1] = $t5
  local[2] = $t0
  local[3] = $t1
  local[4] = $s0
  local[5] = $t2
  local[6] = $t3
  $a0 = $t3
  $a1 = 1
  call $s0
  $t4 = local[0]
  $t5 = local[1]
  $t0 = local[2]
  $t1 = local[3]
  $s0 = local[4]
  $t2 = local[5]
  $t3 = local[6]
  $s0 = $v0
  $s0 = $s0
  $s0 = [$t3]
  $s0 = [$s0 + 48]
  local[0] = $t4
  local[1] = $t5
  local[2] = $t0
  local[3] = $t1
  local[4] = $s0
  local[5] = $t2
  local[6] = $t3
  $a0 = $t3
  $a1 = $t0
  call $s0
  $t4 = local[0]
  $t5 = local[1]
  $t0 = local[2]
  $t1 = local[3]
  $s0 = local[4]
  $t2 = local[5]
  $t3 = local[6]
  $s0 = $v0
  $s0 = $s0
if4_end:
  goto :if3_end
if3_else:
  $s0 = [$t3]
  $s0 = [$s0 + 20]
  local[0] = $t4
  local[1] = $t5
  local[2] = $t0
  local[3] = $t1
  local[4] = $s0
  local[5] = $t2
  local[6] = $t3
  $a0 = $t3
  call $s0
  $t4 = local[0]
  $t5 = local[1]
  $t0 = local[2]
  $t1 = local[3]
  $s0 = local[4]
  $t2 = local[5]
  $t3 = local[6]
  $s0 = $v0
  if0 $s0 goto :if5_else
  $s0 = [$t3]
  $s0 = [$s0 + 28]
  local[0] = $t4
  local[1] = $t5
  local[2] = $t0
  local[3] = $t1
  local[4] = $s0
  local[5] = $t2
  local[6] = $t3
  $a0 = $t3
  call $s0
  $t4 = local[0]
  $t5 = local[1]
  $t0 = local[2]
  $t1 = local[3]
  $s0 = local[4]
  $t2 = local[5]
  $t3 = local[6]
  $s0 = $v0
  $t3 = $s0
  goto :if5_end
if5_else:
  $t4 = 0
  $s0 = [$t3]
  $s0 = [$s0 + 24]
  local[0] = $t4
  local[1] = $t5
  local[2] = $t0
  local[3] = $t1
  local[4] = $s0
  local[5] = $t2
  local[6] = $t3
  $a0 = $t3
  $a1 = 1
  call $s0
  $t4 = local[0]
  $t5 = local[1]
  $t0 = local[2]
  $t1 = local[3]
  $s0 = local[4]
  $t2 = local[5]
  $t3 = local[6]
  $s0 = $v0
  $s0 = $s0
  $s0 = [$t3]
  $s0 = [$s0 + 36]
  local[0] = $t4
  local[1] = $t5
  local[2] = $t0
  local[3] = $t1
  local[4] = $s0
  local[5] = $t2
  local[6] = $t3
  $a0 = $t3
  $a1 = $t0
  call $s0
  $t4 = local[0]
  $t5 = local[1]
  $t0 = local[2]
  $t1 = local[3]
  $s0 = local[4]
  $t2 = local[5]
  $t3 = local[6]
  $s0 = $v0
  $s0 = $s0
if3_end:
if5_end:
  goto :while0_test
while0_end:
  $v0 = 1
  ret

func Tree.Delete [in 0, out 0, local 12]
  $t4 = $a0
  $t2 = $a1
  $t3 = $t4
  $t0 = $t4
  $t1 = 1
  $t5 = 0
  $t6 = 1
while1_test:
  if0 $t1 goto :while1_end
  $t7 = [$t3]
  $s0 = [$t7 + 16]
  local[0] = $t4
  local[1] = $s3
  local[2] = $t5
  local[3] = $t6
  local[4] = $t7
  local[5] = $t0
  local[6] = $t1
  local[7] = $s0
  local[8] = $t2
  local[9] = $s1
  local[10] = $t3
  local[11] = $s2
  $a0 = $t3
  call $s0
  $t4 = local[0]
  $s3 = local[1]
  $t5 = local[2]
  $t6 = local[3]
  $t7 = local[4]
  $t0 = local[5]
  $t1 = local[6]
  $s0 = local[7]
  $t2 = local[8]
  $s1 = local[9]
  $t3 = local[10]
  $s2 = local[11]
  $s0 = $v0
  $s0 = $s0
  $s1 = LtS($t2 $s0)
  if0 $s1 goto :if6_else
  $s1 = [$t3]
  $s1 = [$s1 + 40]
  local[0] = $t4
  local[1] = $s3
  local[2] = $t5
  local[3] = $t6
  local[4] = $t7
  local[5] = $t0
  local[6] = $t1
  local[7] = $s0
  local[8] = $t2
  local[9] = $s1
  local[10] = $t3
  local[11] = $s2
  $a0 = $t3
  call $s1
  $t4 = local[0]
  $s3 = local[1]
  $t5 = local[2]
  $t6 = local[3]
  $t7 = local[4]
  $t0 = local[5]
  $t1 = local[6]
  $s0 = local[7]
  $t2 = local[8]
  $s1 = local[9]
  $t3 = local[10]
  $s2 = local[11]
  $s1 = $v0
  if0 $s1 goto :if7_else
  $t0 = $t3
  $s1 = [$t3]
  $s1 = [$s1 + 44]
  local[0] = $t4
  local[1] = $s3
  local[2] = $t5
  local[3] = $t6
  local[4] = $t7
  local[5] = $t0
  local[6] = $t1
  local[7] = $s0
  local[8] = $t2
  local[9] = $s1
  local[10] = $t3
  local[11] = $s2
  $a0 = $t3
  call $s1
  $t4 = local[0]
  $s3 = local[1]
  $t5 = local[2]
  $t6 = local[3]
  $t7 = local[4]
  $t0 = local[5]
  $t1 = local[6]
  $s0 = local[7]
  $t2 = local[8]
  $s1 = local[9]
  $t3 = local[10]
  $s2 = local[11]
  $s1 = $v0
  $t3 = $s1
  goto :if7_end
if7_else:
  $t1 = 0
if7_end:
  goto :if6_end
if6_else:
  $s0 = LtS($s0 $t2)
  if0 $s0 goto :if8_else
  $s0 = [$t3]
  $s0 = [$s0 + 20]
  local[0] = $t4
  local[1] = $s3
  local[2] = $t5
  local[3] = $t6
  local[4] = $t7
  local[5] = $t0
  local[6] = $t1
  local[7] = $s0
  local[8] = $t2
  local[9] = $s1
  local[10] = $t3
  local[11] = $s2
  $a0 = $t3
  call $s0
  $t4 = local[0]
  $s3 = local[1]
  $t5 = local[2]
  $t6 = local[3]
  $t7 = local[4]
  $t0 = local[5]
  $t1 = local[6]
  $s0 = local[7]
  $t2 = local[8]
  $s1 = local[9]
  $t3 = local[10]
  $s2 = local[11]
  $s0 = $v0
  if0 $s0 goto :if9_else
  $t0 = $t3
  $s0 = [$t3]
  $s0 = [$s0 + 28]
  local[0] = $t4
  local[1] = $s3
  local[2] = $t5
  local[3] = $t6
  local[4] = $t7
  local[5] = $t0
  local[6] = $t1
  local[7] = $s0
  local[8] = $t2
  local[9] = $s1
  local[10] = $t3
  local[11] = $s2
  $a0 = $t3
  call $s0
  $t4 = local[0]
  $s3 = local[1]
  $t5 = local[2]
  $t6 = local[3]
  $t7 = local[4]
  $t0 = local[5]
  $t1 = local[6]
  $s0 = local[7]
  $t2 = local[8]
  $s1 = local[9]
  $t3 = local[10]
  $s2 = local[11]
  $s0 = $v0
  $t3 = $s0
  goto :if9_end
if9_else:
  $t1 = 0
if9_end:
  goto :if8_end
if8_else:
  if0 $t6 goto :if10_else
  $s0 = [$t3]
  $s1 = [$s0 + 20]
  local[0] = $t4
  local[1] = $s3
  local[2] = $t5
  local[3] = $t6
  local[4] = $t7
  local[5] = $t0
  local[6] = $t1
  local[7] = $s0
  local[8] = $t2
  local[9] = $s1
  local[10] = $t3
  local[11] = $s2
  $a0 = $t3
  call $s1
  $t4 = local[0]
  $s3 = local[1]
  $t5 = local[2]
  $t6 = local[3]
  $t7 = local[4]
  $t0 = local[5]
  $t1 = local[6]
  $s0 = local[7]
  $t2 = local[8]
  $s1 = local[9]
  $t3 = local[10]
  $s2 = local[11]
  $s2 = $v0
  $s0 = [$t3]
  $s1 = [$s0 + 20]
  local[0] = $t4
  local[1] = $s3
  local[2] = $t5
  local[3] = $t6
  local[4] = $t7
  local[5] = $t0
  local[6] = $t1
  local[7] = $s0
  local[8] = $t2
  local[9] = $s1
  local[10] = $t3
  local[11] = $s2
  $a0 = $t3
  call $s1
  $t4 = local[0]
  $s3 = local[1]
  $t5 = local[2]
  $t6 = local[3]
  $t7 = local[4]
  $t0 = local[5]
  $t1 = local[6]
  $s0 = local[7]
  $t2 = local[8]
  $s1 = local[9]
  $t3 = local[10]
  $s2 = local[11]
  $s2 = $v0
  $s0 = Eq($s2 0)
  if0 $s0 goto :if11_else
  $s0 = 1
  goto :if11_end
if11_else:
  $s0 = 0
if11_end:
  $s1 = [$t3]
  $s2 = [$s1 + 40]
  local[0] = $t4
  local[1] = $s3
  local[2] = $t5
  local[3] = $t6
  local[4] = $t7
  local[5] = $t0
  local[6] = $t1
  local[7] = $s0
  local[8] = $t2
  local[9] = $s1
  local[10] = $t3
  local[11] = $s2
  $a0 = $t3
  call $s2
  $t4 = local[0]
  $s3 = local[1]
  $t5 = local[2]
  $t6 = local[3]
  $t7 = local[4]
  $t0 = local[5]
  $t1 = local[6]
  $s0 = local[7]
  $t2 = local[8]
  $s1 = local[9]
  $t3 = local[10]
  $s2 = local[11]
  $s3 = $v0
  $s1 = [$t3]
  $s2 = [$s1 + 40]
  local[0] = $t4
  local[1] = $s3
  local[2] = $t5
  local[3] = $t6
  local[4] = $t7
  local[5] = $t0
  local[6] = $t1
  local[7] = $s0
  local[8] = $t2
  local[9] = $s1
  local[10] = $t3
  local[11] = $s2
  $a0 = $t3
  call $s2
  $t4 = local[0]
  $s3 = local[1]
  $t5 = local[2]
  $t6 = local[3]
  $t7 = local[4]
  $t0 = local[5]
  $t1 = local[6]
  $s0 = local[7]
  $t2 = local[8]
  $s1 = local[9]
  $t3 = local[10]
  $s2 = local[11]
  $s3 = $v0
  $s1 = Eq($s3 0)
  if0 $s1 goto :if12_else
  $s1 = 1
  goto :if12_end
if12_else:
  $s1 = 0
if12_end:
  $s0 = MulS($s0 $s1)
  if0 $s0 goto :if13_else
  $s0 = 1
  goto :if13_end
if13_else:
  $s0 = [$t4]
  $s0 = [$s0]
  local[0] = $t4
  local[1] = $s3
  local[2] = $t5
  local[3] = $t6
  local[4] = $t7
  local[5] = $t0
  local[6] = $t1
  local[7] = $s0
  local[8] = $t2
  local[9] = $s1
  local[10] = $t3
  local[11] = $s2
  $a0 = $t4
  $a1 = $t0
  $a2 = $t3
  call $s0
  $t4 = local[0]
  $s3 = local[1]
  $t5 = local[2]
  $t6 = local[3]
  $t7 = local[4]
  $t0 = local[5]
  $t1 = local[6]
  $s0 = local[7]
  $t2 = local[8]
  $s1 = local[9]
  $t3 = local[10]
  $s2 = local[11]
  $s0 = $v0
  $s0 = $s0
if13_end:
  goto :if10_end
if10_else:
  $s0 = [$t4]
  $s0 = [$s0]
  local[0] = $t4
  local[1] = $s3
  local[2] = $t5
  local[3] = $t6
  local[4] = $t7
  local[5] = $t0
  local[6] = $t1
  local[7] = $s0
  local[8] = $t2
  local[9] = $s1
  local[10] = $t3
  local[11] = $s2
  $a0 = $t4
  $a1 = $t0
  $a2 = $t3
  call $s0
  $t4 = local[0]
  $s3 = local[1]
  $t5 = local[2]
  $t6 = local[3]
  $t7 = local[4]
  $t0 = local[5]
  $t1 = local[6]
  $s0 = local[7]
  $t2 = local[8]
  $s1 = local[9]
  $t3 = local[10]
  $s2 = local[11]
  $s0 = $v0
  $s0 = $s0
if10_end:
  $t5 = 1
  $t1 = 0
if6_end:
if8_end:
  $t6 = 0
  goto :while1_test
while1_end:
  $v0 = $t5
  ret

func Tree.Remove [in 0, out 0, local 6]
  $t1 = $a0
  $t2 = $a1
  $t0 = $a2
  $t3 = [$t0]
  $s0 = [$t3 + 40]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s0 = $v0
  if0 $s0 goto :if14_else
  $s0 = [$t1]
  $s0 = [$s0 + 60]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t1
  $a1 = $t2
  $a2 = $t0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s0 = $v0
  $s0 = $s0
  goto :if14_end
if14_else:
  $s0 = [$t0]
  $s0 = [$s0 + 20]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s0 = $v0
  if0 $s0 goto :if15_else
  $s0 = [$t1]
  $s0 = [$s0 + 68]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t1
  $a1 = $t2
  $a2 = $t0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s0 = $v0
  $s0 = $s0
  goto :if15_end
if15_else:
  $s0 = [$t0]
  $s0 = [$s0 + 16]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $t0 = $v0
  $s0 = $t0
  $t0 = [$t2]
  $t0 = [$t0 + 44]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t2
  call $t0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $t0 = $v0
  $s1 = [$t0]
  $s1 = [$s1 + 16]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t0
  call $s1
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $t0 = $v0
  $t0 = $t0
  $s1 = [$t1]
  $s1 = [$s1 + 56]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t1
  $a1 = $s0
  $a2 = $t0
  call $s1
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s0 = $v0
  if0 $s0 goto :if16_else
  $t0 = [$t2]
  $s0 = [$t0 + 48]
  $t0 = [$t1 + 24]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t2
  $a1 = $t0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s0 = $v0
  $t0 = $s0
  $s0 = [$t2]
  $t0 = [$s0 + 64]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t2
  $a1 = 0
  call $t0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s0 = $v0
  $t0 = $s0
  goto :if16_end
if16_else:
  $s0 = [$t2]
  $t0 = [$s0 + 36]
  $s0 = [$t1 + 24]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t2
  $a1 = $s0
  call $t0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $t0 = $v0
  $s0 = $t0
  $t0 = [$t2]
  $s0 = [$t0 + 24]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t2
  $a1 = 0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $t0 = $v0
  $s0 = $t0
if14_end:
if15_end:
if16_end:
  $v0 = 1
  ret

func Tree.RemoveRight [in 0, out 0, local 7]
  $t1 = $a0
  $t0 = $a1
  $t2 = $a2
while2_test:
  $t3 = [$t2]
  $s0 = [$t3 + 20]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $t2
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $s0 = $v0
  if0 $s0 goto :while2_end
  $s0 = [$t2]
  $s0 = [$s0 + 4]
  $s1 = [$t2]
  $s1 = [$s1 + 28]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $t2
  call $s1
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $s1 = $v0
  $s2 = [$s1]
  $s2 = [$s2 + 16]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $s1
  call $s2
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $s1 = $v0
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $t2
  $a1 = $s1
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $s0 = $v0
  $s0 = $s0
  $t0 = $t2
  $s0 = [$t2]
  $s0 = [$s0 + 28]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $t2
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $s0 = $v0
  $t2 = $s0
  goto :while2_test
while2_end:
  $s0 = [$t0]
  $s0 = [$s0 + 36]
  $s1 = [$t1 + 24]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $t0
  $a1 = $s1
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $s0 = $v0
  $s0 = $s0
  $s0 = [$t0]
  $s0 = [$s0 + 24]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $t0
  $a1 = 0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $t0 = $v0
  $s0 = $t0
  $v0 = 1
  ret

func Tree.RemoveLeft [in 0, out 0, local 7]
  $t1 = $a0
  $t0 = $a1
  $t2 = $a2
while3_test:
  $t3 = [$t2]
  $s0 = [$t3 + 40]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $t2
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $s0 = $v0
  if0 $s0 goto :while3_end
  $s0 = [$t2]
  $s0 = [$s0 + 4]
  $s1 = [$t2]
  $s1 = [$s1 + 44]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $t2
  call $s1
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $s1 = $v0
  $s2 = [$s1]
  $s2 = [$s2 + 16]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $s1
  call $s2
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $s1 = $v0
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $t2
  $a1 = $s1
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $s0 = $v0
  $s0 = $s0
  $t0 = $t2
  $s0 = [$t2]
  $s0 = [$s0 + 44]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $t2
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $s0 = $v0
  $t2 = $s0
  goto :while3_test
while3_end:
  $s0 = [$t0]
  $s0 = [$s0 + 48]
  $s1 = [$t1 + 24]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $t0
  $a1 = $s1
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $s0 = $v0
  $s0 = $s0
  $s0 = [$t0]
  $s0 = [$s0 + 64]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  local[6] = $s2
  $a0 = $t0
  $a1 = 0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s2 = local[6]
  $t0 = $v0
  $s0 = $t0
  $v0 = 1
  ret

func Tree.Search [in 0, out 0, local 6]
  $t0 = $a0
  $t2 = $a1
  $t1 = $t0
  $t3 = 1
  $s0 = 0
while4_test:
  if0 $t3 goto :while4_end
  $t0 = [$t1]
  $t0 = [$t0 + 16]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t1
  call $t0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $t0 = $v0
  $t0 = $t0
  $s1 = LtS($t2 $t0)
  if0 $s1 goto :if17_else
  $s1 = [$t1]
  $s1 = [$s1 + 40]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t1
  call $s1
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s1 = $v0
  if0 $s1 goto :if18_else
  $s1 = [$t1]
  $s1 = [$s1 + 44]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t1
  call $s1
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $s1 = $v0
  $t1 = $s1
  goto :if18_end
if18_else:
  $t3 = 0
if18_end:
  goto :if17_end
if17_else:
  $t0 = LtS($t0 $t2)
  if0 $t0 goto :if19_else
  $t0 = [$t1]
  $t0 = [$t0 + 20]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t1
  call $t0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $t0 = $v0
  if0 $t0 goto :if20_else
  $t0 = [$t1]
  $t0 = [$t0 + 28]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  local[5] = $t3
  $a0 = $t1
  call $t0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t3 = local[5]
  $t0 = $v0
  $t1 = $t0
  goto :if20_end
if20_else:
  $t3 = 0
if20_end:
  goto :if19_end
if19_else:
  $s0 = 1
  $t3 = 0
if17_end:
if19_end:
  goto :while4_test
while4_end:
  $v0 = $s0
  ret

func Tree.Print [in 0, out 0, local 4]
  $t0 = $a0
  $t1 = $t0
  $t2 = [$t0]
  $s0 = [$t2 + 12]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  $a0 = $t0
  $a1 = $t1
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $t0 = $v0
  $s0 = $t0
  $v0 = 1
  ret

func Tree.RecPrint [in 0, out 0, local 5]
  $t1 = $a0
  $t0 = $a1
  $t2 = [$t0]
  $s0 = [$t2 + 40]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  $a0 = $t0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $s0 = $v0
  if0 $s0 goto :if21_else
  $s0 = [$t1]
  $s0 = [$s0 + 12]
  $s1 = [$t0]
  $s1 = [$s1 + 44]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  $a0 = $t0
  call $s1
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $s1 = $v0
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  $a0 = $t1
  $a1 = $s1
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $s0 = $v0
  $s0 = $s0
  goto :if21_end
if21_else:
  $s0 = 1
if21_end:
  $s0 = [$t0]
  $s0 = [$s0 + 16]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  $a0 = $t0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $s0 = $v0
  PrintIntS($s0)
  $s0 = [$t0]
  $s0 = [$s0 + 20]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  $a0 = $t0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $s0 = $v0
  if0 $s0 goto :if22_else
  $s0 = [$t1]
  $s0 = [$s0 + 12]
  $s1 = [$t0]
  $s1 = [$s1 + 28]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  $a0 = $t0
  call $s1
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $t0 = $v0
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  local[3] = $t2
  local[4] = $s1
  $a0 = $t1
  $a1 = $t0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t2 = local[3]
  $s1 = local[4]
  $s0 = $v0
  $t0 = $s0
  goto :if22_end
if22_else:
  $s0 = 1
if22_end:
  $v0 = 1
  ret

func AllocArray [in 0, out 0, local 0]
  $t0 = $a0
  $t1 = MulS($t0 4)
  $t1 = Add($t1 4)
  $s0 = HeapAllocZ($t1)
  [$s0] = $t0
  $v0 = $s0
  ret

func ArrayIndexHelper [in 0, out 0, local 0]
  $t0 = $a0
  $s0 = Add($t0 1)
  $t0 = MulS($s0 4)
  $v0 = $t0
  ret

func Main [in 0, out 0, local 3]
  $t0 = HeapAllocZ(4)
  [$t0] = :ft_BT
  $t1 = [$t0]
  $s0 = [$t1]
  local[0] = $t0
  local[1] = $t1
  local[2] = $s0
  $a0 = $t0
  call $s0
  $t0 = local[0]
  $t1 = local[1]
  $s0 = local[2]
  $t0 = $v0
  PrintIntS($t0)
  ret


