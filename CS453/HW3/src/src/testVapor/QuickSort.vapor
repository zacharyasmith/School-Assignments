const ft_QS
  :QS.Sort
  :QS.Print
  :QS.Start
  :QS.Init

func QS.Start(this t.1)
  t.22 = [this + 0]
  t.23 = [t.22 + 12]
  t.24 = call t.23(this t.1)
  t.2 = t.24
  t.25 = [this + 0]
  t.26 = [t.25 + 4]
  t.27 = call t.26(this)
  t.2 = t.27
  PrintIntS(9999)
  t.28 = [this + 8]
  t.29 = Sub(t.28 1)
  t.2 = t.29
  t.30 = [this + 0]
  t.31 = [t.30 + 0]
  t.32 = call t.31(this 0 t.2)
  t.2 = t.32
  t.33 = [this + 0]
  t.34 = [t.33 + 4]
  t.35 = call t.34(this)
  t.2 = t.35
  ret 0

func QS.Sort(this t.4 t.5)
  t.10 = 0
  t.36 = LtS(t.4 t.5)
  if0 t.36 goto :if0_else
    t.93 = call :ArrayIndexHelper(t.5)
    t.37 = [this + 4]
    t.94 = Add(t.37 t.93)
    t.38 = [t.94]
    t.6 = t.38
    t.39 = Sub(t.4 1)
    t.7 = t.39
    t.8 = t.5
    t.11 = 1
    while0_test:
      if0 t.11 goto :while0_end
    while0_body:
      t.12 = 1
      while1_test:
        if0 t.12 goto :while1_end
      while1_body:
        t.40 = Add(t.7 1)
        t.7 = t.40
        t.95 = call :ArrayIndexHelper(t.7)
        t.41 = [this + 4]
        t.96 = Add(t.41 t.95)
        t.42 = [t.96]
        t.13 = t.42
        t.43 = LtS(t.13 t.6)
        t.43 = LtS(t.13 t.6)
        t.45 = Eq(t.43 0)
        if0 t.45 goto :if1_else
          t.44 = 1
        goto :if1_end
        if1_else:
          t.44 = 0
        if1_end:
        if0 t.44 goto :if2_else
          t.12 = 0
        goto :if2_end
        if2_else:
          t.12 = 1
        if2_end:
        goto :while1_test
      while1_end:
      t.12 = 1
      while2_test:
        if0 t.12 goto :while2_end
      while2_body:
        t.46 = Sub(t.8 1)
        t.8 = t.46
        t.97 = call :ArrayIndexHelper(t.8)
        t.47 = [this + 4]
        t.98 = Add(t.47 t.97)
        t.48 = [t.98]
        t.13 = t.48
        t.49 = LtS(t.6 t.13)
        t.49 = LtS(t.6 t.13)
        t.51 = Eq(t.49 0)
        if0 t.51 goto :if3_else
          t.50 = 1
        goto :if3_end
        if3_else:
          t.50 = 0
        if3_end:
        if0 t.50 goto :if4_else
          t.12 = 0
        goto :if4_end
        if4_else:
          t.12 = 1
        if4_end:
        goto :while2_test
      while2_end:
      t.99 = call :ArrayIndexHelper(t.7)
      t.52 = [this + 4]
      t.100 = Add(t.52 t.99)
      t.53 = [t.100]
      t.10 = t.53
      t.54 = [this + 4]
      t.101 = call :ArrayIndexHelper(t.7)
      t.101 = Add(t.54 t.101)
      t.102 = call :ArrayIndexHelper(t.8)
      t.55 = [this + 4]
      t.103 = Add(t.55 t.102)
      t.56 = [t.103]
      [t.101] = t.56
      t.57 = [this + 4]
      t.104 = call :ArrayIndexHelper(t.8)
      t.104 = Add(t.57 t.104)
      [t.104] = t.10
      t.58 = Add(t.7 1)
      t.59 = LtS(t.8 t.58)
      if0 t.59 goto :if5_else
        t.11 = 0
      goto :if5_end
      if5_else:
        t.11 = 1
      if5_end:
      goto :while0_test
    while0_end:
    t.60 = [this + 4]
    t.105 = call :ArrayIndexHelper(t.8)
    t.105 = Add(t.60 t.105)
    t.106 = call :ArrayIndexHelper(t.7)
    t.61 = [this + 4]
    t.107 = Add(t.61 t.106)
    t.62 = [t.107]
    [t.105] = t.62
    t.63 = [this + 4]
    t.108 = call :ArrayIndexHelper(t.7)
    t.108 = Add(t.63 t.108)
    t.109 = call :ArrayIndexHelper(t.5)
    t.64 = [this + 4]
    t.110 = Add(t.64 t.109)
    t.65 = [t.110]
    [t.108] = t.65
    t.66 = [this + 4]
    t.111 = call :ArrayIndexHelper(t.5)
    t.111 = Add(t.66 t.111)
    [t.111] = t.10
    t.67 = [this + 0]
    t.68 = [t.67 + 0]
    t.69 = Sub(t.7 1)
    t.70 = call t.68(this t.4 t.69)
    t.9 = t.70
    t.71 = [this + 0]
    t.72 = [t.71 + 0]
    t.73 = Add(t.7 1)
    t.74 = call t.72(this t.73 t.5)
    t.9 = t.74
  goto :if0_end
  if0_else:
    t.9 = 0
  if0_end:
  ret 0

func QS.Print(this)
  t.15 = 0
  while3_test:
    t.75 = [this + 8]
    t.76 = LtS(t.15 t.75)
    if0 t.76 goto :while3_end
  while3_body:
    t.112 = call :ArrayIndexHelper(t.15)
    t.77 = [this + 4]
    t.113 = Add(t.77 t.112)
    t.78 = [t.113]
    PrintIntS(t.78)
    t.79 = Add(t.15 1)
    t.15 = t.79
    goto :while3_test
  while3_end:
  ret 0

func QS.Init(this t.17)
  [this + 8] = t.17
  t.81 = call :AllocArray(t.17)
  [this + 4] = t.81
  t.83 = [this + 4]
  t.114 = call :ArrayIndexHelper(0)
  t.114 = Add(t.83 t.114)
  [t.114] = 20
  t.84 = [this + 4]
  t.115 = call :ArrayIndexHelper(1)
  t.115 = Add(t.84 t.115)
  [t.115] = 7
  t.85 = [this + 4]
  t.116 = call :ArrayIndexHelper(2)
  t.116 = Add(t.85 t.116)
  [t.116] = 12
  t.86 = [this + 4]
  t.117 = call :ArrayIndexHelper(3)
  t.117 = Add(t.86 t.117)
  [t.117] = 18
  t.87 = [this + 4]
  t.118 = call :ArrayIndexHelper(4)
  t.118 = Add(t.87 t.118)
  [t.118] = 2
  t.88 = [this + 4]
  t.119 = call :ArrayIndexHelper(5)
  t.119 = Add(t.88 t.119)
  [t.119] = 11
  t.89 = [this + 4]
  t.120 = call :ArrayIndexHelper(6)
  t.120 = Add(t.89 t.120)
  [t.120] = 6
  t.90 = [this + 4]
  t.121 = call :ArrayIndexHelper(7)
  t.121 = Add(t.90 t.121)
  [t.121] = 9
  t.91 = [this + 4]
  t.122 = call :ArrayIndexHelper(8)
  t.122 = Add(t.91 t.122)
  [t.122] = 19
  t.92 = [this + 4]
  t.123 = call :ArrayIndexHelper(9)
  t.123 = Add(t.92 t.123)
  [t.123] = 5
  ret 0

func AllocArray(size)
  bytes = MulS(size 4)
  bytes = Add(bytes 4)
  v = HeapAllocZ(bytes)
  [v] = size
  ret v

func ArrayIndexHelper(index)
  loc = Add(index 1)
  addr = MulS(loc 4)
  ret addr

func Main()
  t.18 = HeapAllocZ(12)
  [t.18] = :ft_QS
  t.19 = [t.18 + 0]
  t.20 = [t.19 + 8]
  t.21 = call t.20(t.18 10)
  PrintIntS(t.21)
  ret

